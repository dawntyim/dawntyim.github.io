<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Dawn Yim's Blog</title><link>https://dawntyim.github.io/posts/</link><description>Recent content in Posts on Dawn Yim's Blog</description><image><url>https://dawntyim.github.io/papermod-cover.png</url><link>https://dawntyim.github.io/papermod-cover.png</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 Jan 2023 22:22:26 -0800</lastBuildDate><atom:link href="https://dawntyim.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Delegates</title><link>https://dawntyim.github.io/posts/delegates/</link><pubDate>Thu, 19 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/delegates/</guid><description>Delegates Delegates predicate enhances flexiblility in code. Delegate delegates method call to other methods. Invoking a delegate means passing parameters to the target method via the delegate method and receiving return value from the target method via the delegate method
This simplest example will help you understand Delegate concept
public delegate void Delegator(string message); public static void TargetMethod(string message) { Console.Writeln(&amp;#34;This is delegated method&amp;#34;); Console.Writeln(message); } Delegator handler = TargetMethod; handler(&amp;#34;This is the message&amp;#34;); By stating a delegate method, you can plug in different methods for a delegate method.</description></item><item><title>Asynchronous Pattern</title><link>https://dawntyim.github.io/posts/asynchronous_pattern/</link><pubDate>Mon, 16 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/asynchronous_pattern/</guid><description>Asynchronous Pattern Asynchronous vs Synchronous Asynchronous and synchronous programming handle long running operations differently.
Synchronous: Blocks programming execution until a long running operation completes.
Asynchronous: Doesn’t block programming execution waiting for long running operation results.
Asynchronous program splits programs into small tasks that can be executed independently and concurrently.
When to use? When need to return results quickly e.g., UI. Not to let any long running operation cause unresponsiveness in an application.</description></item><item><title>Understanding Bitcoin Cryptography 4 - ECDSA (Elliptic Curve Digital Signature Algorithm)</title><link>https://dawntyim.github.io/posts/bitcoin-cryptography-4/</link><pubDate>Sun, 15 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/bitcoin-cryptography-4/</guid><description>Understanding Bitcoin Signature 4 - ECDSA (Elliptic Curve Digital Signature Algorithm) Digital Signature Algorithm Digital Signature Digital Signatures is based on asymmetric cryptography. Unlike symmetric cryptography that uses single key to encrypt and decrypt a message which is safer encryption, digital signature has to use asymmetric keys to enable ‘prove’ and ‘verify’ steps. We need a pair of public and private key so that the private key owner can prove that this message was encrypted by herself.</description></item><item><title>Understanding Bitcoin Cryptography 3 - Elliptic Curve</title><link>https://dawntyim.github.io/posts/bitcoin-cryptography-3/</link><pubDate>Fri, 13 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/bitcoin-cryptography-3/</guid><description>Understanding Bitcoin Signature 3 -Elliptic Curve Elliptic Curve The combination of elliptic curve and prime field arithmetic is utilized in various cryptographic applications due to the inherent difficulty of solving the discrete log problem.
Elliptic Curve on Real Numbers Elliptic curves have general form $y^2 = a x^3 + bx +c$. This is an example where a = 1, b = 1, c = 7 $y^2 = x^3 + x + 7$</description></item><item><title>Understanding Bitcoin Cryptography 2 - Prime Fields and Discrete Logarithm Problem</title><link>https://dawntyim.github.io/posts/bitcoin-cryptography-2/</link><pubDate>Wed, 11 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/bitcoin-cryptography-2/</guid><description>Understanding Bitcoin Signature 2 - Prime Fields and Discrete Logarithm Problem Prime Fields Bitcoin utilizes prime fields among finite fields due to their unique properties that make them well-suited for cryptographic applications. Specifically, a set of integers modulo a prime number forms a finite field with a prime number of elements. This finite field, known as a Galois field, is represented as $GF(p)$ or $\mathbb F_p^*$ or $\langle Z/pZ \rangle$.</description></item><item><title>Garbage Collection</title><link>https://dawntyim.github.io/posts/garbege_collection/</link><pubDate>Tue, 10 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/garbege_collection/</guid><description>Garbage Collection and Disposable vs Finalization IDisposable vs Finalizer IDisposable interface is provided in C# to provide a mechanism for releasing unmanaged resources directly by developers. Althought the garbage collector deallocate unused objects, but it is not possible to predict when the garbage collection will occur.
On the contrary, a finalizer is a method that is called by the garbage collector when an object is not in use anymore. Finalizaing ~Object (); is freeing resources and perform cleanup operations before it’s reclaimed by garbage collection.</description></item><item><title>Http Connection Management</title><link>https://dawntyim.github.io/posts/http-connection-management/</link><pubDate>Mon, 09 Jan 2023 23:00:54 -0800</pubDate><guid>https://dawntyim.github.io/posts/http-connection-management/</guid><description>HTTP Connections and management tips</description></item><item><title>Understanding Bitcoin Cryptography 1 - Intro and Finite Fields</title><link>https://dawntyim.github.io/posts/bitcoin-cryptography-1/</link><pubDate>Mon, 09 Jan 2023 22:22:26 -0800</pubDate><guid>https://dawntyim.github.io/posts/bitcoin-cryptography-1/</guid><description>Disclaimer: This is purely my (a complete layperson in Cryptography and mathematics) understanding of Bitcoin cryptography. There can be misinformation. Please correct me if anything’s incorrect!
Let’s start with the problem that Bitcoin is solving.
Bitcoin utilizes cryptography to ensure that only the true owner of a certain number of coins can prove ownership and that the public can verify this claim. This is achieved through the use of digital signature algorithms that employ the concept of public and private keys.</description></item><item><title>Create Hugo Webpage</title><link>https://dawntyim.github.io/posts/post-hugo/</link><pubDate>Sun, 08 Jan 2023 22:39:37 -0800</pubDate><guid>https://dawntyim.github.io/posts/post-hugo/</guid><description>How to set config and deploy a hugo project</description></item><item><title>SQL Index</title><link>https://dawntyim.github.io/posts/sql-index/</link><pubDate>Sat, 07 Jan 2023 14:17:45 -0800</pubDate><guid>https://dawntyim.github.io/posts/sql-index/</guid><description>SQL indexing basics</description></item></channel></rss>